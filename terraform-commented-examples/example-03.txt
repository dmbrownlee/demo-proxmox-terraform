# A simple example that creates a text file in the current directory.

terraform {
  required_version = ">= 1.5.7"
  required_providers {
    local = {
      source = "hashicorp/local"
      version = ">= 2.4.0"
    }
  }
}

# Here we define a "local_file" resource.  OMG! The indentation is
# horrible!  We can fix that with:
#   terraform fmt
#
# This tells terraform to format our .tf files so they are pretty.
# This is also a good time to run "terraform validate" again to
# check for syntax errors.  You may want to make these two commands
# standard practice before checking code into version control.

resource "local_file" "my_local_file" {
     content = "This is an example file.\n"
  filename   = "data_file.txt"
   file_permission = "0644"
}

# That's better.  Now run:
#   terraform apply
#
# When you respond "yes" to tell terraform to continue, it creates
# the "data_file.txt" file in the current directory with the
# contents and file permissions we specified. Terraform will manage
# this file.  Change the contents of the file outside of terraform
# with:
#   echo 'hello world' > data_file.txt
#
# Now run terraform apply again.  Since you told terraform you wanted
# the file to have specific contents and the contents are now
# incorrect, terraform informs you it will need to delete the existing
# file and recreate it in order to bring it back into compliance.
#
# Note: file permissions should probably work the same way, but they
# don't and there is currently a bug in the "local" provider for this.
#
# When you are done, you can run:
#   terraform destroy
#
# Terraform will delete ALL the resources it manages which, in this
# case, is just the one file.
