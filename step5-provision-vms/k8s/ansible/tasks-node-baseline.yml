---
- name: Ensure package cache is updated
  ansible.builtin.apt:
    update_cache: yes
    cache_valid_time: 3600
  register: apt_update
  until: apt_update is success
  retries: 10
  delay: 30
- name: Ensure default system packages are up to date
  ansible.builtin.apt:
    upgrade: yes
    autoclean: yes
  register: apt_upgrade
  until: apt_upgrade is success
  retries: 10
  delay: 30
- name: Ensure we reboot (serially) when updates have been applied
  ansible.builtin.reboot:
    reboot_timeout: 300
    connect_timeout: 600
  when: apt_upgrade.changed
  throttle: 1
- name: Ensure GPG and some other handy items are installed
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - bash-completion
      - ca-certificates
      - curl
      - git
      - gnupg
      - socat
      - vim
- name: Ensure the GPG key for the docker apt repo is installed
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/debian/gpg
    keyring: /etc/apt/trusted.gpg.d/docker.gpg
- name: Ensure the GPG key for the kubernetes apt repo is installed
  ansible.builtin.apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key
    keyring: /etc/apt/trusted.gpg.d/kubernetes.gpg
- name: Ensure docker registry is configured
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://download.docker.com/linux/debian bookworm stable
    filename: docker
  register: docker_repo
- name: Ensure kubernetes registry is configured
  ansible.builtin.apt_repository:
    repo: deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/kubernetes.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /
    filename: kubernetes
  register: kubernetes_repo
- name: Ensure package cache is updated if new repos have been added
  ansible.builtin.apt:
    update_cache: yes
  when: docker_repo.changed or kubernetes_repo.changed
  register: apt_update
  until: apt_update is success
  retries: 10
  delay: 30
- name: Ensure the overlay kernel module is loaded at boot
  community.general.modprobe:
    name: overlay
    state: present
    persistent: present
- name: Ensure the br_netfilter kernel module is loaded at boot
  community.general.modprobe:
    name: br_netfilter
    state: present
    persistent: present
- name: Ensure IPv4 forwarding is enabled in kernel
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    sysctl_set: true
    state: present
    reload: true
- name: Ensure net filtering is enabled on IPv4 bridge
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-iptables
    value: '1'
    sysctl_set: true
    state: present
    reload: true
- name: Ensure IPv6 forwarding is enabled in kernel
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: '1'
    sysctl_set: true
    state: present
    reload: true
- name: Ensure net filtering is enabled on IPv6 bridge
  ansible.posix.sysctl:
    name: net.bridge.bridge-nf-call-ip6tables
    value: '1'
    sysctl_set: true
    state: present
    reload: true
- name: Ensure containerd is installed
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
- name: Ensure containerd is configured correctly
  ansible.builtin.template:
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: '0644'
    src: config.toml.j2
  register: containerd_config
- name: Ensure containerd is restarted if its configuration changed
  ansible.builtin.systemd:
    name: containerd
    state: restarted
  when: containerd_config.changed
- name: Ensure the kubernetes CLI tools (and jq) are installed
  ansible.builtin.apt:
    name:
      - cri-tools
      - kubelet
      - kubeadm
      - kubectl
      - jq
- name: Ensure the etcd CLI tools are installed on control plane nodes
  ansible.builtin.apt:
    name:
      - etcd-client
  when: inventory_hostname in groups["k8s_control_plane_nodes"]
- name: Ensure helm is installed
  ansible.builtin.unarchive:
    src: https://get.helm.sh/helm-v3.14.3-linux-amd64.tar.gz
    dest: /usr/local/bin
    remote_src: yes
    owner: root
    group: root
    mode: '0755'
    extra_opts:
      - --strip-components=1
    creates: /usr/local/bin/helm
# - name: Ensure command completion for kubectl and helm are setup in bashrc file
#   ansible.builtin.blockinfile:
#     path: /home/ansible/.bashrc
#     block: |
#       export KUBECONFIG=$HOME/.kube/config
#       source <(kubectl completion bash)
#       source <(helm completion bash)
#       alias k="kubectl"
#       complete -o default -F __start_kubectl k
- name: Ensure command completion for CLI commands are setup for root
  ansible.builtin.blockinfile:
    path: /root/.bashrc
    marker: '# {mark} K8S CLI BLOCK'
    block: |
      export KUBECONFIG=/etc/kubernetes/admin.conf
      source <(crictl completion bash)
      source <(kubeadm completion bash)
      source <(kubectl completion bash)
      source <(helm completion bash)
      alias k="kubectl"
      complete -o default -F __start_kubectl k
- name: Ensure command completion for etcdctl is configured for root
  ansible.builtin.blockinfile:
    path: /root/.bashrc
    marker: '# {mark} ETCDCTL BLOCK'
    block: |
      source <(etcdctl completion bash)
  when: inventory_hostname in groups["k8s_control_plane_nodes"]
